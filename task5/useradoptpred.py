# -*- coding: utf-8 -*-
"""UserAdoptPred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dPaEs5gnNTu_xlobl244okYnV7kKvpWI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

th_user=pd.read_csv("takehome_users.csv",encoding='unicode_escape')
th_usereng=pd.read_csv("takehome_user_engagement.csv")

with open('takehome_users.csv') as f:
    print(f)

th_user

th_usereng

#merge based on user_id after renaming 
th_user.rename(columns={'object_id':'user_id'},inplace=True)
th_user

fin_user=pd.merge(th_user,th_usereng,on='user_id')
fin_user

fin_user.info()

#unix timestamp to datetime 
fin_user['last_session_creation_time']= pd.to_datetime(fin_user['last_session_creation_time'],unit='s')

fin_user['creation_time']=pd.to_datetime(fin_user['creation_time'])
fin_user['time_stamp']=pd.to_datetime(fin_user['time_stamp'])

fin_user.info()

fin_user.isnull().sum()

#find week to count visits for adopted user 
fin_user['week'] = fin_user['last_session_creation_time'].dt.isocalendar().week

fin_user

groupdf=fin_user.groupby(['user_id','creation_source','opted_in_to_mailing_list','enabled_for_marketing_drip','org_id','week'])['visited'].count().reset_index()
groupdf

#Create Adopted USER based on visits
groupdf['adopted_user'] = groupdf['visited'].apply(lambda x: 'yes' if x >= 3 else 'No')

groupdf

#EDA 
plt.figure(figsize=(10,5))
sns.countplot(data=groupdf,x=groupdf['creation_source'])
plt.title("Source count")

#encode cat data
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

groupdf['creation_source']= le.fit_transform(groupdf['creation_source'])
groupdf['adopted_user']= le.fit_transform(groupdf['adopted_user'])

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn import feature_selection

X=groupdf.drop(columns=['user_id','adopted_user','visited'],axis=1)
Y=groupdf['adopted_user']
print(X.shape)
print(Y.shape)

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.3,random_state=30)
model=LogisticRegression()
model.fit(x_train,y_train)

scor=model.score(x_test,y_test)
#print("score:",scor)
print("Logistic Regression score:",scor*100,"%")#Accuracy

from sklearn.tree import DecisionTreeClassifier
dtree=DecisionTreeClassifier()
dtree.fit(x_train,y_train)

dtreesc=dtree.score(x_test,y_test)*100
print("Decision Tree Score is :",dtreesc)

from sklearn.ensemble import RandomForestClassifier 
rafo = RandomForestClassifier(n_estimators=150,max_depth=4,random_state=5)
rafo.fit(x_train,y_train)

rforest_score = rafo.score(x_test,y_test)*100
rforest_score

#Feature Importance

f_scores = pd.Series(rafo.feature_importances_,index=x_train.columns).sort_values(ascending=False)
f_scores = f_scores*100
f_scores

sns.barplot(x=f_scores,y=f_scores.index)
plt.show()

